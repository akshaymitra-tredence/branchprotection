name: SonarQube analysis

on:
  push:
    branches: [ "feature/x" ]
  
  workflow_dispatch:

jobs:
  sonarqube-analysis:
    runs-on: self-hosted
    name: SonarQube Analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest coverage pytest-cov

      - name: Run tests with coverage (continue on failure)
        run: |
          set +e  # Don't exit on error if tests fail
          
          python -m pytest tests/ \
            --cov=app \
            --cov-report=xml:coverage.xml \
            --junit-xml=test-results.xml \
            -v
          
          TEST_EXIT_CODE=$?
          echo "Test exit code: $TEST_EXIT_CODE"
          echo "=== Test Results Summary ==="
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "✅ All tests passed"
          else
            echo "❌ Some tests failed (exit code: $TEST_EXIT_CODE)"
          fi
          
          # Ensure coverage.xml exists even if tests fail
          if [ ! -f "coverage.xml" ]; then
            echo "Generating coverage.xml manually..."
            python -m coverage xml
          fi
          
          # Show coverage summary
          echo "=== Coverage Summary ==="
          python -m coverage report || echo "Could not generate coverage report"
          
          set -e  # Re-enable exit on error

      - name: Download and setup SonarScanner
        run: |
          if [ ! -d "sonar-scanner-5.0.1.3006-linux" ]; then
            wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
            unzip sonar-scanner.zip
            rm sonar-scanner.zip
          fi
          export PATH=$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH
          echo "$PWD/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "http://host.docker.internal:9003"
        run: |
          sonar-scanner \
            -Dsonar.projectKey=branchprotection-git \
            -Dsonar.projectName="Branch Protection Git Project" \
            -Dsonar.sources=app \
            -Dsonar.tests=tests \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.python.xunit.reportPath=test-results.xml \
            -Dsonar.python.version=3.9 \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage.xml
            test-results.xml

  # approval-gate:
  #   runs-on: self-hosted
  #   name: Approval Gate
  #   needs: sonarqube-analysis
  #   environment: dev
    
  #   steps:
  #     - name: Approval Required
  #       run: |
  #         echo "SonarQube analysis completed successfully!"
  #         echo "Waiting for approval to proceed..."

  # post-approval:
  #   runs-on: self-hosted
  #   name: Post Approval Actions
  #   needs: approval-gate
    
  #   steps:
  #     - name: Echo Hello World
  #       run: |
  #         echo "Hello World!"
  #         echo "Approval granted - proceeding with deployment/next steps"
  #         echo "SonarQube analysis passed and was approved!"